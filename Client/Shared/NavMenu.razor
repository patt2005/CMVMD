@using CMVMD.Client.Services.User
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager Navigation
@inject IUserService _userService

<style>
    .rz-panel-menu-item {
        font-size: 0.875rem;
        font-weight: normal;
    }
</style>

<RadzenHeader>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" style="width: 100%;">
        <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
        <RadzenText class="pt-2" TextStyle="TextStyle.H3" style="color:rgba(58,136,244,255); flex-grow: 1;">
            <strong>CMV.md</strong>
        </RadzenText>
        @if (user?.Identity?.IsAuthenticated ?? false)
        {
            <RadzenButton Text="Ieșire" Icon="logout" ButtonStyle="ButtonStyle.Danger" style="margin-right: 20px;"
                Click="@Logout" />
        }
    </RadzenStack>
</RadzenHeader>

<RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute;">
    <RadzenPanelMenu>
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Acasă" Icon="home" Path="/" Click="HideSideBar" />
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Despre CMV" Icon="info">
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Prezentarea Generală" Click="HideSideBar"
                Path="/general" />
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Biroul Executiv" Click="HideSideBar"
                Path="/executiv" />
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Comisia de Dentologie şi Litigii" Click="HideSideBar"
                Path="/comisia" />
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Legislaţie" Icon="gavel" Path="/legislatie"
            Click="HideSideBar" />
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Lista medecilor veterinari" Icon="clinical_notes"
            Click="HideSideBar" Path="/lista/veterinarilor" />
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Formarea profesională continuă" Icon="school">
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Componența Comisiei" Click="HideSideBar"
                Path="/componenta" />
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Documente" Click="HideSideBar"
                Path="/formare/documente" />
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Articole" Icon="article" Click="HideSideBar"
            Path="/articole" />
        <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Evenimente" Icon="event" Click="HideSideBar"
            Path="/calendar" />
        @if (user?.Identity?.IsAuthenticated ?? false)
        {
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Adaugă un articol" Icon="post_add" Click="HideSideBar"
                Path="/articol/editeaza" />
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Adaugă un document" Icon="upload_file">
                <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Legislaţie" Click="HideSideBar"
                    Path="/documente/legislatie/editeaza" />
                <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Formarea profesională continuă" Click="HideSideBar"
                    Path="/documente/formare/editeaza" />
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem class="rz-panel-menu-item" Text="Adaugă un eveniment" Icon="calendar_add_on"
                Click="HideSideBar" Path="/eveniment/editeaza" />
        }
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    private ClaimsPrincipal? user;
    bool sidebarExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private void HideSideBar()
    {
        sidebarExpanded = false;
    }

    private async Task Logout()
    {
        var success = await _userService.Logout();
        if (success)
        {
            Navigation.Refresh();
        }
    }
}
