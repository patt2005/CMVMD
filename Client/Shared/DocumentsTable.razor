@using System.Net.Http
@using System.Threading.Tasks
@using CMVMD.Client.Services.Document
@using CMVMD.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IDocumentService _documentService
@inject AuthenticationStateProvider _authenticationStateProvider

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@Documents" ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or" style="height: 70vh;"
    EmptyText="Nu există documente în tabel încă.">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(DocumentDto.Name)" Title="Denumirea" Width="65px" />
        <RadzenDataGridColumn Property="@nameof(DocumentDto.Description)" Title="Descrierea" Width="160px" />
        <RadzenDataGridColumn Title="Documente" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Click=@(args => DownloadDocument(@data.File!.FileUrl)) Text="Descarcă"
                    ButtonStyle="ButtonStyle.Primary" Icon="download" />
            </Template>
        </RadzenDataGridColumn>
        @if (user?.Identity?.IsAuthenticated ?? false)
        {
            <RadzenDataGridColumn Title="Acțiuni" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenButton Click=@(args => NavigateToEditPage(@data.Id)) Text="Editează"
                        ButtonStyle="ButtonStyle.Info" Icon="edit" />
                    <RadzenButton Text="Șterge" Icon="delete" style="margin-left: 1rem;" ButtonStyle="ButtonStyle.Danger"
                        Click="@(args => DeleteDocument(@data.Id))" />
                </Template>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {
    [Parameter]
    public IEnumerable<DocumentDto> Documents { get; set; } = default!;
    [Parameter]
    public bool IsLegislationDocument { get; set; }

    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task DownloadDocument(string fileUrl)
    {
        var fileBytes = await GetFileByteArrayAsync(fileUrl);
        Uri uri = new Uri(fileUrl);
        string fileName = System.IO.Path.GetFileName(uri.LocalPath);
        using var streamRef = new DotNetStreamReference(new MemoryStream(fileBytes));
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task<byte[]> GetFileByteArrayAsync(string fileUrl)
    {
        try
        {
            var response = await HttpClient.GetAsync(fileUrl);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsByteArrayAsync();
        }
        catch
        {
            return Array.Empty<byte>();
        }
    }

    private async Task DeleteDocument(Guid guidId)
    {
        string id = guidId.ToString();
        if (IsLegislationDocument)
        {
            await _documentService.DeleteLegislationDocumentById(id);
        }
        else
        {
            await _documentService.DeleteTrainingDocumentById(id);
        }
        Navigation.NavigateTo("/");
    }

    private void NavigateToEditPage(Guid documentId)
    {
        string id = documentId.ToString();
        if (IsLegislationDocument)
        {
            Navigation.NavigateTo($"documente/legislatie/editeaza/{id}");

        }
        else
        {
            Navigation.NavigateTo($"documente/formare/editeaza/{id}");
        }
    }
}
